/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./src/assets/models/petri/petri_box.glb --transform 
Files: ./src/assets/models/petri/petri_box.glb [125.8KB] > C:\Users\chikane\Desktop\projects\fidget\petri_box-transformed.glb [39.99KB] (68%)
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import petriModel from '../assets/models/petri_box-transformed.glb'
import ScreenShape from './ScreenShape'

export default function Petri(props) {
  const { scene } = useGLTF(petriModel)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes } = useGraph(clone)
  return (
    <ScreenShape {...props} dispose={null}>
        <directionalLight intensity={3.589} decay={2} color="#b9b8b8" rotation={[-1.576, -0.028, 1.571]} scale={0.01} target={nodes.Directional_Light.target}>
          <primitive object={nodes.Directional_Light.target} position={[0, 0, -1]} />
        </directionalLight>
        <PerspectiveCamera makeDefault={false} far={100000} near={70} fov={45} position={[0.178, 65.391, -0.047]} rotation={[-1.571, 0, Math.PI]} scale={0.01} />
        <PerspectiveCamera makeDefault={false} far={100000} near={70} fov={45} position={[0.352, 15.276, -0.079]} rotation={[-1.571, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube_5.geometry} material={nodes.Cube_5.material} position={[0, 1.03, 1.578]} rotation={[-Math.PI / 2, Math.PI / 2, 0]} scale={[0.05, 0.01,0.01]} material-color="#c0c0c0">
          <meshStandardMaterial metalness={0.5} roughness={0}/>
        </mesh>
    </ScreenShape>
    
  )
}

useGLTF.preload(petriModel)
